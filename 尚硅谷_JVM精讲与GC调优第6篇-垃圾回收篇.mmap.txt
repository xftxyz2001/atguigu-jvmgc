第6篇-垃圾回收篇\n讲师-宋红康
	01-概 述
		面试题
		什么是垃圾？
		为什么需要GC?
		Java中垃圾回收的重点区域是？
		早期的GC
	02-垃圾回收算法
		面试题
		垃圾判别阶段算法
			引用计数算法
				原理
				优缺点
				代码举例
				如果就想用此算法，怎么解决循环引用
			可达性分析算法
				原理与基本思路
				优点
				GC Roots
					面试题
				注意点
				MAT与JProfiler的GC Roots溯源
		垃圾清除阶段算法
			标记-清除算法
				缺点
			复制算法
				优缺点
				应用场景
			标记-压缩算法
				指针碰撞
				优缺点
			分代收集算法
				面试题
				分析
			增量收集算法
				缺点
			分区算法
	03-相关概念
		System.gc()
			面试题
			代码举例
		finalize()方法详解
			finalize的作用
			finalize的问题
			finalize的执行过程(生命周期)
		内存泄漏与内存溢出
			面试题
			内存溢出
				内存不够的原因？
				OOM前必有GC?
			内存泄漏
				内存泄漏的理解与分类
				Java中内存泄漏的8种情况
					1- 静态集合类
					2- 单例模式
					3- 内部类持有外部类
					4- 各种连接，如数据库连接、网络连接和IO连接等
					5- 变量不合理的作用域
					6- 改变哈希值
					7- 缓存泄漏
					8- 监听器和回调
		STW
			面试题
		垃圾回收的并行与并发
			并发
			并行
			对比
		安全点与安全区域
			面试题
			安全点？
			安全区域？
		5种引用
			面试题
			强引用：不回收
			软引用：内存不足即回收
			弱引用：发现即回收
			虚引用：对象回收跟踪
			终结器引用
	04-垃圾回收器
		GC分类
			串行vs并行
			并发式vs独占式
			压缩式vs非压缩式
			年轻代vs老年代
		GC评估指标
			面试题
			吞吐量
			暂停时间
			小结
		垃圾回收器都有哪些？
			GC发展史
			面试题
			7种GC组合关系？
			为什么这么多GC
			如何查看默认GC?
			Serial GC：串行回收
				概述
				优势
				参数
				小结
			ParNew GC：并行回收
				概述
				ParNewGC更好？
				参数
			Parallel GC：吞吐量优先
				概述
				参数
			CMS：低延迟
				面试题
				概述
				收集过程
				补充说明
				为什么不使用Mark-Compact？
				优缺点
				参数
				小结
				新特性
			G1 GC：区域化分代式
				面试题
				为什么需要G1?
				为什么叫G1？
				概述
				特点
				参数
				操作步骤
				适用场景
				分区Region
				垃圾回收过程
					过程1：年轻代GC
					过程2：并发标记过程
					过程3：混合回收
					过程4：FullGC
				G1优化建议
		各GC使用场景
		如何选择？
		GC新发展
			Epsilon GC
			Shenandoah GC
			革命性的ZGC
			其他GC
	05-分析GC日志
		01-GC日志参数
			-verbose:gc
				输出gc日志信息，默认输出到标准输出
			-XX:+PrintGC
				输出GC日志。类似：-verbose:gc
			-XX:+PrintGCDetails
				在发生垃圾回收时打印内存回收详细的日志，\n并在进程退出时输出当前内存各区域分配情况
			-XX:+PrintGCTimeStamps
				输出GC发生时的时间戳
			-XX:+PrintGCDateStamps
				输出GC发生时的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）
			-XX:+PrintHeapAtGC
				每一次GC前和GC后，都打印堆信息
			-Xloggc:<file>
				表示把GC日志写入到一个文件中去，而不是打印到标准输出中
		02-GC日志格式
			GC日志分类
				MinorGC
				FullGC
			GC日志结构剖析
				垃圾收集器
				GC前后情况
				GC时间
			Minor GC 日志解析
				2020-11-20T17:19:43.265-0800
					日志打印时间 日期格式  如 2013-05-04T21:53:59.234+0800
				0.822:
					gc发生时，Java虚拟机启动以来经过的秒数
				[GC (Allocation Failure)
					发生了一次垃圾回收，这是一次Minor GC 。它不区分新生代 GC 还是老年代 GC，括号里的内容是gc发生的原因，这里的Allocation Failure的原因是新生代中没有足够区域能够存放需要分配的数据而失败。
				[PSYoungGen: 76800K->8433K(89600K)]
					PSYoungGen：表示GC发生的区域，区域名称与使用的GC 收集器是密切相关的
						Serial收集器：Default New Generation  显示DefNew
						ParNew收集器：ParNew
						Parallel Scanvenge收集器： PSYoung
						老年代和新生代同理，也是和收集器名称相关
					76800K->8433K(89600K)：GC 前该内存区域已使用容量 - > GC 后该区域容量 （该区域总容量）
						如果是新生代，总容量则会显示整个新生代内存的9/10，即 eden+from/to 区
						如果是老年代，总容量则是全部内存大小，无变化
				76800K->8449K(294400K)
					在显示完区域容量GC的情况之后，会接着显示整个堆内存区域的GC情况：GC 前堆内存已使用容量 - > GC 堆内存容量（堆内存总容量）\n堆内存总容量 = 9/10 新生代+ 老年代 < 初始化的内存大小
				, 0.0088371 secs]
					整个GC所花费的时间，单位是秒
				[Times: user=0.02 sys=0.01, real=0.01 secs]
					user：指的是CPU工作在用户态所花费的时间
					sys：指的是CPU工作在内核态所花费的时间
					real：指的是在此次GC事件中所花费的总时间
			Full GC 日志解析
				2020-11-20T17:19:43.794-0800
					日志打印时间 日期格式  如 2013-05-04T21:53:59.234+0800
				1.351
					gc发生时，Java虚拟机启动以来经过的秒数
				Full GC (Metadata GC Threshold)
					发生了一次垃圾回收，这是一次FULL GC 。它不区分新生代 GC 还是老年代 GC
					括号里的内容是gc发生的原因，这里的Metadata GC Threshold的原因是Metaspace区不够用了。
						Full GC (Ergonomics) ：JVM 自适应调整导致的GC
						Full GC (System）： 调用了System.gc( ) 方法
				[PSYoungGen: 10082K->0K(89600K)]
					PSYoungGen：表示GC发生的区域，区域名称与使用的GC 收集器是密切相关的
						Serial收集器：Default New Generation  显示DefNew
						ParNew收集器：ParNew
						Parallel Scanvenge收集器： PSYoung
						老年代和新生代同理，也是和收集器名称相关
					10082K->0K(89600K)：GC 前该内存区域已使用容量 - > GC 后该区域容量 （该区域总容量）
						如果是新生代，总容量则会显示整个新生代内存的9/10，即 eden+from/to 区
						如果是老年代，总容量则是全部内存大小，无变化
				[ParOldGen: 32K->9638K(204800K)]
					老年代区域没有发生GC，因为本次GC是metaspace引起的
				10114K->9638K(294400K),
					在显示完区域容量GC的情况之后，会接着显示整个堆内存区域的GC情况：\nGC 前堆内存已使用容量 - > GC 堆内存容量（堆内存总容量）\n堆内存总容量 = 9/10 新生代+ 老年代 < 初始化的内存大小
				[Metaspace: 20158K->20156K(1067008K)],
					metaspace GC  回收2K空间
				0.0285388 secs
					整个GC所花费的时间，单位是秒
				[Times: user=0.11 sys=0.00, real=0.03 secs]
					user：指的是CPU工作在用户态所花费的时间
					sys：指的是CPU工作在内核态所花费的时间
					real：指的是在此次GC事件中所花费的总时间
		案例演示
			代码举例
			图解
		03-GC日志分析工具
			GCeasy
				基本概述
			GCViewer
				基本概述
				安装
			其他工具
				GChisto
					官网上没有下载的地方， 需要自己从 SVN 上拉下来编译
					不过这个工具似乎没怎么维护了， 存在不少 bug
				HPjmeter
					工具很强大，但只能打开由以下参数生成的GC log， -verbose:gc -Xloggc:gc.log。添加其他参数生成的gc.log无法打开
					HPjmeter集成了以前的HPjtune功能，可以分析在HP机器上产生的垃圾回收日志文件
