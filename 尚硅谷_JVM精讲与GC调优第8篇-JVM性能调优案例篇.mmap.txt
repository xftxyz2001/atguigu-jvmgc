第8篇-JVM性能调优案例篇\n讲师-宋红康
	01-概述篇
		面试题
		1-生产环境中的问题
			生产环境发生了内存溢出该如何处理？
			生产环境应该给服务器分配多少内存合适？
			如何对垃圾回收器的性能进行调优？
			生产环境CPU负载飙高该如何处理？
			生产环境应该给应用分配多少线程合适？
			不加log，如何确定请求是否执行了某一行代码？
			不加log，如何实时查看某个方法的入参与返回值？
		2-调优基本问题
			1-为什么要调优？
				防止出现OOM，进行JVM规划和预调优
				解决程序运行中各种OOM
				减少Full GC出现的频率，解决运行慢、卡顿问题
			2-调优的大方向
				合理地编写代码
				充分并合理的使用硬件资源
				合理地进行JVM调优
			3-不同阶段的考虑
				上线前
				项目运行阶段
				线上出现OOM
			4-两句话
				调优，从业务场景开始，没有业务场景的调优都是耍流氓！
				无监控，不调优！
		3-调优监控的依据
			运行日志
			异常堆栈
			GC日志
			线程快照
			堆转储快照
		4-性能优化的步骤
			第1步：熟悉业务场景
			第2步（发现问题）：性能监控
				GC 频繁
				cpu load过高
				OOM
				内存泄漏
				死锁
				程序响应时间较长
			第3步（排查问题）：性能分析
				打印GC日志，通过GCviewer或者 http://gceasy.io来分析日志信息
				灵活运用 命令行工具，jstack，jmap，jinfo等
				dump出堆文件，使用内存分析工具分析文件
				使用阿里Arthas，或jconsole，JVisualVM来实时查看JVM状态
				jstack查看堆栈信息
			第4步（解决问题）：性能调优
				适当增加内存，根据业务背景选择垃圾回收器
				优化代码，控制内存使用
				增加机器，分散节点压力
				合理设置线程池线程数量
				使用中间件提高程序效率，比如缓存，消息队列等
				其他.......
			举例
		5-性能评价/测试指标
			1-停顿时间（或响应时间）
			2-吞吐量
				对单位时间内完成的工作量(请求)的量度
				在GC中：运行用户代码的时间占总运行时间的比例（总运行时间：程序的运行时间＋内存回收的时间）\n吞吐量为1 -1/(1+n)。-XX:GCTimeRatio=n
			3-并发数
				同一时刻，对服务器有实际交互的请求数
			4-内存占用
				Java 堆区所占的内存大小
			5-相互间的关系
				以高速公路通行状况为例
	02-OOM案例
		面试题
		OOM案例1：堆溢出 
			报错信息
				java.lang.OutOfMemoryError: Java heap space
			案例模拟
				发送请求
					http://localhost:8080/add
			JVM参数配置
			运行结果
			原因及解决方案
			dump文件分析
				jvisualvm分析
				MAT分析
			gc日志分析
		OOM案例2：元空间溢出
			元空间存储数据类型
			报错信息
				java.lang.OutOfMemoryError: Metaspace
			案例模拟
				示例代码
				发送请求
					http://localhost:8080/metaSpaceOom
				运行结果
			JVM参数配置
			原因及解决方案
			分析及解决
				查看监控
				查看GC状态
				查看GC日志
				分析dump文件
					jvisualvm分析
					MAT分析
				解决方案
		OOM案例3：GC overhead limit exceeded
			案例模拟
				示例代码1
					JVM配置
					报错信息
				示例代码2
					JVM配置
			代码解析
			分析及解决
				第1步：定位问题代码块
					jvisualvm分析
					MAT分析
				第2步：分析dump文件直方图
				第3步：代码修改
		OOM案例4：线程溢出
			报错信息
				java.lang.OutOfMemoryError : unable to create new native Thread
			问题原因
				出现这种异常，基本上都是创建了大量的线程导致的
			案例模拟
				说明
				示例代码
				运行结果
			分析及解决
				解决方向1
				解决方向2
	03-性能测试工具：Jmeter
		基本概述
			主界面
		使用流程
			新增线程组
			新增 JMeter 元组
			新增监听器
			运行&查看结果
				调试运行，分析指标数据，挖掘性能瓶颈、评估系统性能状态
	04-性能优化案例
		面试题
		性能优化案例1：\n调整堆大小提高服务的吞吐量
			修改tomcatJVM配置
			初始配置
				查看日志
			优化配置
				查看日志
		性能优化案例2：JVM优化之JIT优化
			堆，是分配对象的唯一选择吗
			编译的开销
				时间开销
				空间开销
			即时编译对代码的优化
				逃逸分析
					代码举例1
					代码举例2
					参数设置
				代码优化一：栈上分配
					代码举例
				代码优化二：同步省略(消除)
					代码举例
				代码优化三：标量替换
					代码举例1
					参数设置
					代码举例2
				逃逸分析小结
		性能优化案例3：合理配置堆内存
			推荐配置
			如何计算老年代存活对象
				方式1：查看日志
				方式2：强制触发FullGC
			案例演示
				JVM配置参数
				代码演示
			数据分析
			结论
			你会估算GC频率吗？
		特殊问题：新生代与老年代的比例
			参数设置
			参数AdaptiveSizePolicy
				补充
		性能优化案例4：\nCPU占用很高排查方案
			案例
			问题呈现
			问题分析
				延伸
			解决方案
		性能优化案例5：\nG1并发执行的线程数对性能的影响
			配置信息
				硬件配置
					8核linux
				JVM参数设置
			初始的状态
			优化之后
			总结
		性能优化案例6：\n调整垃圾回收器提高服务的吞吐量
			初始配置
			优化配置1
				查看日志
			优化配置2
				查看日志
			优化配置3
				查看日志
		性能优化案例7：\n日均百万级订单交易系统如何设置JVM参数
			问题拓展
				压力测试！
		面试小结
			part1
			part2
